struct slist
{
    int data;
    struct slist *next;
};
typedef struct slist node;
node *create(node *first)
{
    node *new,*prev;
    int x;
    printf("enter -1 to stop");
    printf("\n enter data value:");
    scanf("%d",&x);
    while(x!=-1)
    {
        new=(node *)malloc(sizeof(node));
        new->data=x;
        new->next=0;
        if(first==0)
        {
            first=new;
            prev=new;
        }
        else
        {
            prev->next=new;
            prev=new;
        }
        printf("\nenter data ele:");
        scanf("%d",&x);
    }
    return first;
}
void display(node *first)
{
    node *temp=first;
    if(first==0)
    printf("\nno list to print");
    else
    {
        while(temp!=0)
        {
            printf("|%d|->",temp->data);
            temp=temp->next;
        }
        printf("NULL");
    }
}
int count(node *first)
{
  int c=0;
  node *temp=first;
  while(temp!=0)
  {
    c=c+1;
    temp=temp->next;
  }
  return c;
}
void search(node *first,int x)
{
  node *temp=first;
  int flag=0;
  while(temp!=0)
  {
    if(temp->data==x)
    {
      flag=1;
      break;
    }
    else
    temp=temp->next;
  }
  if(flag==1)
  printf("\n ele found");
  else
  printf("\n ele not found");
}
node *insert_at_begin(node *first,int x)
{
  node *new=(node *)malloc(sizeof(node));
  new->data=x;
  new->next=0;
  if(first==0)
  {
    first=new;
  }
  else
  {
    new->next=first;
    first=new;
  }
  return first;
}
node *insert_at_end(node *first,int x)
{
  node *new=(node *)malloc(sizeof(node));
  new->data=x;
  new->next=0;
  node *temp=first;
  if(first==0)
  {
    first=new;
  }
  else
  {
    while(temp->next!=0)
    {
      temp=temp->next;
    }
    temp->next=new;
  }
  return first;
}
node *insert_at_pos(node *first,int x,int pos)
{
  node *new,*temp=first;
  int n=count(first);
  if(pos>1&&pos<n)
  {
    new=(node *)malloc(sizeof(node));
    new->data=x;
    new->next=0;
    for(int i=1;i<pos-1;i++)
    {
      temp=temp->next;
    }
    new->next=temp->next;
    temp->next=new;
  }
  return first;
}
node *deleted(node *first,int x)
{
  node *temp,*temp1;int flag=0;
  temp=first;
  if(first->data==x)
  {
    first=first->next;
    free(temp);
  }
  else
  {
    temp1=first;
    temp=first->next;
    while(temp!=0)
    {
      if(temp->data==x)
      {
        flag=1;
        break;
      }
      else
      {
        temp1=temp;
        temp=temp->next;
      }
    }
  }
  if(flag==1)
  {
    temp1->next=temp->next;
    free(temp);
  }
  else
  {
    printf("%d ele not found",x);
  }
  return first;
}
void sort(node *first)
{
  node *temp1,*temp=first;int x;
  for(temp=first;temp!=0;temp=temp->next)
  {
    for(temp1=temp->next;temp!=0;temp=temp->next)
    {
      if(temp->data>temp1->data)
      {
        x=temp->data;
        temp->data=temp1->data;
        temp1->data=x;
      }
    }
  }
}
node *reverse(node *first)
{
  node *present=first,*prev=0,*save;
  while(present!=0)
  {
    save=present->next;
    present->next=prev;
    prev=present;
    present=save;
  }
  return prev;
}
#include<stdio.h>
void main()
{
    int ch,x,pos,n;
    node *head=0;
    while(1)
    {
        printf("\n 1.create\n2.display\n3.count\n4.search\n5.insert_at_begin\n6.insert_at-end\n7.insert_at_pos\nn8.delete\n9.sort\n10.reverse\n11.exit");
        printf("\n enter  choice:");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1:head=create(head);
            break;
            case 2:printf("\nlist of ele are:");
            display(head);
            break;
            case 3:n=count(head);
            printf("\nno of nodes in list:%d",n);
            break;
            case 4:printf("\nenter ele to search:");
            scanf("%d",&x);
            search(head,x);
            break;
            case 5:printf("\nenter ele to be inserted:");
            scanf("%d",&x);
            head=insert_at_begin(head,x);
            break;
            case 6:printf("\n enter ele to insert;");
            scanf("%d",&x);
            head=insert_at_end(head,x);
            break;
            case 7:printf("\n enter ele to insert:");
            scanf("%d",&x);
            printf("\nenter pos to be inserted:");
            scanf("%d",&pos);
            break;
            case 8:printf("\nenter ele to be deleted:");
            scanf("%d",&x);
            head=deleted(head,x);
            break;
            case 9:sort(head);
            break;
            case 10:head=reverse(head);
            break;
            case 11:_Exit;
            default:printf("\ncheck choice entered")
        ;}
    }
}
